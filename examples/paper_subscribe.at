@name paper_subscribe

@desc 
订阅paperwithcode上的论文
@desc

@import BasicToolkit

DEF getContent(url)
	papersPage. @LLM(deepseek-chat) 获取 {url} 页面内容
	paperLinks. 页面内容如下：--{papersPage}--。从页面内容中提取出论文的标题和链接 => {{ 标题1:链接1, ... }}
	FOR paperLink in paperLinks
		fullLink. #PY ```"{url}"+"{paperLink.value}"```
		paperPage. 获取 {fullLink} 页面内容
		paperInfo. 提取内容中arxiv pdf链接的相关内容，以及论文的发布日期，
			链接模式为https://arxiv.org/pdf/xxxx.pdf
			内容如下：----{paperPage}---- => {{link:论文链接, pubDate:发布日期}}
		check. #IF 如果今天距离{paperInfo.pubDate}天数绝对值不超过14天，则 返回 _NEXT_，否则返回 _RET_
		paperLocalLink. 从{paperInfo.link}下载文件, 并且返回文件本地地址
		paperContent. 读取文件 {paperLocalLink} 中的内容
		paperDigest. 对下面的内容用中文进行总结，分为"问题概要"、"问题分析"、"问题解决"三部分阐述: {paperContent}
		ret. #RET {{"title": "{{paperLink.key}}", "link": "{{fullLink}}", "digest": "{{paperDigest}}", "pubDate": "{{paperInfo.pubDate}}"}}
	END -> papers
END

DEF sendMail(papers, emailAddr)
	paperTitleStr. #PY ```from datetime import datetime; f"论文摘要-{source}-{{datetime.now().strftime('%Y-%m-%d')}}"```
	paperContentStr. #PY ```"\n\n".join([f"标题：{{paper['title']}}\n\n链接：{{paper['link']}}\n\n内容：\n{{paper['digest']}}\n\n发布日期：{{paper['pubDate']}}\n\n" for paper in {papers}])```
	format. 将以下内容用 markdown 格式化成可读性较好的格式，其中“标题”、“链接”、“发布日期”用粗体显示，“内容”部分格式化为次级
		```
		{paperContentStr}
		```
	mail. 根据下面信息发一份邮件，正文用 markdown 格式
		收件人:{emailAddr}
		标题:[{paperTitleStr}]
		正文:[{{paperContentStr}}]
END

source. "paperwithcode"
papers. @getContent({url})
sendMail. @sendMail({papers}, {emailAddr})